{"version":3,"sources":["components/Board.js","functions/utils.js","functions/boardFunctions.js","components/Game.js","App.js","index.js"],"names":["Board","initialSquares","Array","fill","key","defaultValue","serialize","JSON","stringify","deserialize","parse","React","valueInLocalStorage","window","localStorage","getItem","state","setState","prevKeyRef","prevKey","current","removeItem","setItem","useLocalStorageState","squares","setSquares","nextValue","filter","Boolean","length","calculateNextValue","winner","lines","i","a","b","c","calculateWinner","status","every","calculateStatus","renderSquare","className","onClick","square","squaresCopy","selectSquare","Game","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAiEeA,EAzDD,WACZ,IAAMC,EAAiBC,MAAM,GAAGC,KAAK,MAGrC,ECHF,SACEC,GAGC,IAFDC,EAEA,uDAFe,GAEf,yDAD2D,GAC3D,IADEC,iBACF,MADcC,KAAKC,UACnB,MAD8BC,mBAC9B,MAD4CF,KAAKG,MACjD,EACA,EAA0BC,YAAe,WACvC,IAAMC,EAAsBC,OAAOC,aAAaC,QAAQX,GACxD,OAAIQ,EACKH,EAAYG,GAEU,oBAAjBP,EAA8BA,IAAiBA,KAL/D,mBAAOW,EAAP,KAAcC,EAAd,KAQMC,EAAaP,SAAaP,GAWhC,OATAO,aAAgB,WACd,IAAMQ,EAAUD,EAAWE,QACvBD,IAAYf,GACdS,OAAOC,aAAaO,WAAWF,GAEjCD,EAAWE,QAAUhB,EACrBS,OAAOC,aAAaQ,QAAQlB,EAAKE,EAAUU,MAC1C,CAACZ,EAAKY,EAAOV,IAET,CAACU,EAAOC,GDrBeM,CAAqB,UAAWtB,GAA9D,mBAAOuB,EAAP,KAAgBC,EAAhB,KAEMC,EEAR,SAA4BF,GAC1B,OAAOA,EAAQG,OAAOC,SAASC,OAAS,IAAM,EAAI,IAAM,IFDtCC,CAAmBN,GAC/BO,EEMR,SAAyBP,GAWvB,IAVA,IAAMQ,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAMH,OAAQI,IAAK,CACrC,kBAAkBD,EAAMC,GAAxB,GAAOC,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIZ,EAAQU,IAAMV,EAAQU,KAAOV,EAAQW,IAAMX,EAAQU,KAAOV,EAAQY,GACpE,OAAOZ,EAAQU,GAGnB,OAAO,KFvBQG,CAAgBb,GACzBc,EEbR,SAAyBP,EAAQP,EAASE,GACxC,OAAOK,EAAM,kBACEA,GACXP,EAAQe,MAAMX,SAAd,oCAEgBF,GFQLc,CAAgBT,EAAQP,EAASE,GAgBhD,SAASe,EAAaR,GACpB,OACE,wBAAQS,UAAU,SAASC,QAAS,kBAhBxC,SAAsBC,GACpB,IAAIb,IAAUP,EAAQoB,GAAtB,CAIA,IAAMC,EAAW,YAAOrB,GACxBqB,EAAYD,GAAUlB,EACtBD,EAAWoB,IASiCC,CAAab,IAAvD,SACGT,EAAQS,KAKf,OACE,gCACE,qBAAKS,UAAU,SAAf,SAAyBJ,IACzB,sBAAKI,UAAU,YAAf,UACGD,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKC,UAAU,YAAf,UACGD,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKC,UAAU,YAAf,UACGD,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,wBAAQC,UAAU,UAAUC,QA9BhC,WACElB,EAAWxB,IA6BT,yBG7CS8C,EAVF,WACX,OACE,qBAAKL,UAAU,OAAf,SACE,qBAAKA,UAAU,aAAf,SACE,cAAC,EAAD,SCAOM,MAJf,WACE,OAAO,cAAC,EAAD,KCCTC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ab14b2fd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useLocalStorageState } from \"../functions/utils\";\r\nimport {\r\n  calculateStatus,\r\n  calculateNextValue,\r\n  calculateWinner,\r\n} from \"../functions/boardFunctions\";\r\n\r\nconst Board = () => {\r\n  const initialSquares = Array(9).fill(null);\r\n\r\n  //  squares is the state for this component. Add useState for squares\r\n  const [squares, setSquares] = useLocalStorageState(\"squares\", initialSquares);\r\n\r\n  const nextValue = calculateNextValue(squares);\r\n  const winner = calculateWinner(squares);\r\n  const status = calculateStatus(winner, squares, nextValue);\r\n\r\n  function selectSquare(square) {\r\n    if (winner || squares[square]) {\r\n      return;\r\n    }\r\n\r\n    const squaresCopy = [...squares];\r\n    squaresCopy[square] = nextValue;\r\n    setSquares(squaresCopy);\r\n  }\r\n\r\n  function restart() {\r\n    setSquares(initialSquares);\r\n  }\r\n\r\n  function renderSquare(i) {\r\n    return (\r\n      <button className=\"square\" onClick={() => selectSquare(i)}>\r\n        {squares[i]}\r\n      </button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"status\">{status}</div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(6)}\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n      </div>\r\n      <button className=\"restart\" onClick={restart}>\r\n        restart\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import * as React from \"react\";\r\n\r\n/**\r\n *\r\n * @param {String} key The key to set in localStorage for this value\r\n * @param {Object} defaultValue The value to use if it is not already in localStorage\r\n * @param {{serialize: Function, deserialize: Function}} options The serialize and deserialize functions to use (defaults to JSON.stringify and JSON.parse respectively)\r\n */\r\n\r\nfunction useLocalStorageState(\r\n  key,\r\n  defaultValue = \"\",\r\n  { serialize = JSON.stringify, deserialize = JSON.parse } = {}\r\n) {\r\n  const [state, setState] = React.useState(() => {\r\n    const valueInLocalStorage = window.localStorage.getItem(key);\r\n    if (valueInLocalStorage) {\r\n      return deserialize(valueInLocalStorage);\r\n    }\r\n    return typeof defaultValue === \"function\" ? defaultValue() : defaultValue;\r\n  });\r\n\r\n  const prevKeyRef = React.useRef(key);\r\n\r\n  React.useEffect(() => {\r\n    const prevKey = prevKeyRef.current;\r\n    if (prevKey !== key) {\r\n      window.localStorage.removeItem(prevKey);\r\n    }\r\n    prevKeyRef.current = key;\r\n    window.localStorage.setItem(key, serialize(state));\r\n  }, [key, state, serialize]);\r\n\r\n  return [state, setState];\r\n}\r\n\r\nexport { useLocalStorageState };\r\n","import React from \"react\";\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction calculateStatus(winner, squares, nextValue) {\r\n  return winner\r\n    ? `Winner: ${winner}`\r\n    : squares.every(Boolean)\r\n    ? `Its a Draw`\r\n    : `Next player: ${nextValue}`;\r\n}\r\n\r\nexport { calculateStatus };\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction calculateNextValue(squares) {\r\n  return squares.filter(Boolean).length % 2 === 0 ? \"X\" : \"O\";\r\n}\r\n\r\nexport { calculateNextValue };\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport { calculateWinner };\r\n","import React from \"react\";\r\nimport Board from \"./Board\";\r\n\r\nconst Game = () => {\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import \"./App.css\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}